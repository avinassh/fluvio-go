// WARNING: This file has automatically been generated on Sun, 04 Apr 2021 17:55:48 IST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package fluvio_cgo

/*
#cgo LDFLAGS: -L../target/debug -lfluvio_go
#include "../src/fluvio_go.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"fmt"
	"runtime"
	"sync"
	"unsafe"
)

// Ref returns a reference to C object as it is.
func (x *Fluvio) Ref() *C.Fluvio {
	if x == nil {
		return nil
	}
	return (*C.Fluvio)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Fluvio) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFluvioRef converts the C object reference into a raw struct reference without wrapping.
func NewFluvioRef(ref unsafe.Pointer) *Fluvio {
	return (*Fluvio)(ref)
}

// NewFluvio allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFluvio() *Fluvio {
	return (*Fluvio)(allocFluvioMemory(1))
}

// allocFluvioMemory allocates memory for type C.Fluvio in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFluvioMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFluvioValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFluvioValue = unsafe.Sizeof([1]C.Fluvio{})

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Fluvio) PassRef() *C.Fluvio {
	if x == nil {
		x = (*Fluvio)(allocFluvioMemory(1))
	}
	return (*C.Fluvio)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *TopicProducer) Ref() *C.TopicProducer {
	if x == nil {
		return nil
	}
	return (*C.TopicProducer)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *TopicProducer) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewTopicProducerRef converts the C object reference into a raw struct reference without wrapping.
func NewTopicProducerRef(ref unsafe.Pointer) *TopicProducer {
	return (*TopicProducer)(ref)
}

// NewTopicProducer allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewTopicProducer() *TopicProducer {
	return (*TopicProducer)(allocTopicProducerMemory(1))
}

// allocTopicProducerMemory allocates memory for type C.TopicProducer in C.
// The caller is responsible for freeing the this memory via C.free.
func allocTopicProducerMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfTopicProducerValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfTopicProducerValue = unsafe.Sizeof([1]C.TopicProducer{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *TopicProducer) PassRef() *C.TopicProducer {
	if x == nil {
		x = (*TopicProducer)(allocTopicProducerMemory(1))
	}
	return (*C.TopicProducer)(unsafe.Pointer(x))
}

type sliceHeader struct {
	Data unsafe.Pointer
	Len  int
	Cap  int
}

// copyPStructFluvioBytes copies the data from Go slice as *C.struct_Fluvio.
func copyPStructFluvioBytes(slice *sliceHeader) (*C.struct_Fluvio, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CBytes(*(*[]byte)(unsafe.Pointer(&sliceHeader{
		Data: slice.Data,
		Len:  int(sizeOfStructFluvioValue) * slice.Len,
		Cap:  int(sizeOfStructFluvioValue) * slice.Len,
	}))))
	allocs.Add(mem0)

	return (*C.struct_Fluvio)(mem0), allocs
}

// allocStructFluvioMemory allocates memory for type C.struct_Fluvio in C.
// The caller is responsible for freeing the this memory via C.free.
func allocStructFluvioMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfStructFluvioValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfStructFluvioValue = unsafe.Sizeof([1]C.struct_Fluvio{})

// copyPStructTopicProducerBytes copies the data from Go slice as *C.struct_TopicProducer.
func copyPStructTopicProducerBytes(slice *sliceHeader) (*C.struct_TopicProducer, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CBytes(*(*[]byte)(unsafe.Pointer(&sliceHeader{
		Data: slice.Data,
		Len:  int(sizeOfStructTopicProducerValue) * slice.Len,
		Cap:  int(sizeOfStructTopicProducerValue) * slice.Len,
	}))))
	allocs.Add(mem0)

	return (*C.struct_TopicProducer)(mem0), allocs
}

// allocStructTopicProducerMemory allocates memory for type C.struct_TopicProducer in C.
// The caller is responsible for freeing the this memory via C.free.
func allocStructTopicProducerMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfStructTopicProducerValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfStructTopicProducerValue = unsafe.Sizeof([1]C.struct_TopicProducer{})
